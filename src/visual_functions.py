import matplotlib.pyplot as plt
from matplotlib import colors
import numpy as np

'''Overview of functions contained in this module:
     - generate_checkerboard
     - visualize_pattern
'''

def generate_checkerboard(checkerboard_size = 50, sub_matrix_size = 5):

    '''
    This function is made to generate a checkerboard pattern (in matrix shape) of alternated -1 and 1 submatrices of size sub_matrix_size.

    Paramaters
    ----------
    checkerboard_size: integer
        This represents the size of the square matrix generated by this function.
    sub_matrix_size : integer
        This represents the size of the alternated submatrices of -1 and 1.

    Returns
    ----------
    The generated checkerboard matrix (a numpy array of numpy arrays)
    
    Note
    ----
    The generated checkerboard does not have submatrices of all the same size: the overhangs that could not fit because of the set submatrix size are sliced off.


    Example
    -------
    >>> generate_checkerboard(4,2)
    array([[ 1.,  1., -1., -1.],
           [ 1.,  1., -1., -1.],
           [-1., -1.,  1.,  1.],
           [-1., -1.,  1.,  1.]])

    >>> generate_checkerboard(5,3)
    array([[ 1.,  1.,  1., -1., -1.],
           [ 1.,  1.,  1., -1., -1.],
           [ 1.,  1.,  1., -1., -1.],
           [-1., -1., -1.,  1.,  1.],
           [-1., -1., -1.,  1.,  1.]])
    '''

    #Creating a matrix that has one dimension of submatrices too much, so we can return a slice of it
    repetitions = checkerboard_size//sub_matrix_size + 1

    matrix_row = np.ones(repetitions)
    matrix_row[1::2] *= -1

    checkerboard = np.tile(matrix_row, (repetitions, 1))
    checkerboard[1::2] *= -1
    checkerboard = np.repeat(checkerboard, sub_matrix_size, axis=0)
    checkerboard = np.repeat(checkerboard, sub_matrix_size, axis=1)

    return checkerboard[:checkerboard_size, :checkerboard_size]

def visualize_pattern(pattern, title = 'Pattern'):

    '''
    This function displays the visual representation of a pattern as a matrix where each pixel represents the state of an element of the given pattern.
    The firing state (1) is associated with the color white while the non-fining state (-1) associated with black color.

    Parameters
    ----------
    patterns: matrix (linear pattern reshaped as a square matrix)
        Set of state of neurons networks at a given time t.
    title : string
        Name of the pattern that is visualised
    '''

    cmap = colors.ListedColormap(['k','w'])
    plt.title(title)
    plt.imshow(pattern, cmap)
    plt.show()

def visualize_patterns(patterns, titles):

    '''
    This function displays the visual representation of a set of patterns pattern as a matrix where each pixel represents the state of an element of the given pattern.
    The firing state (1) is associated with the color white while the non-fining state (-1) associated with black color.

    Parameters
    ----------
    patterns: list of matrices (linear pattern reshaped as a square matrix)
        Set of state of neurons networks at a given time t.
    titles : list of strings
        Name of the pattern that is visualised
    '''

    num_subplots = len(patterns)

    fig, axes = plt.subplots(nrows=1, ncols=num_subplots)
    cmap = colors.ListedColormap(['k','w'])

    for i in range(num_subplots):
        axes[i].set_title(titles[i])
        axes[i].imshow(patterns[i],cmap)
        
    plt.show()
    
if __name__ == "__main__":
    import doctest
    print("Starting doctests for visual_functions.py")
    doctest.testmod()
    print("Finishing doctests for visual_functions.py")
